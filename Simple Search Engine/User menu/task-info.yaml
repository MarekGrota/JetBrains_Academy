type: edu
custom_name: stage3
files:
- name: src/search/Main.java
  visible: true
  text: |
    package search;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import search.Main;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.LinkedList;
    import java.util.List;

    class TestClue {
        int referencesCount;
        String input;

        TestClue(int referencesCount, String input) {
            this.referencesCount = referencesCount;
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        public static final String names =
            "Dwight Joseph djo@gmail.com\n" +
            "Rene Webb webb@gmail.com\n" +
            "Katie Jacobs\n" +
            "Erick Harrington harrington@gmail.com\n" +
            "Myrtle Medina\n" +
            "Erick Burgess\n";

        public static final String test1 =
            "6\n" +
            names +
            "2\n" +
            "0";

        public static final String test2 =
            "6\n" +
            names +
            "1\n" +
            "burgess\n" +
            "0";

        public static final String test3 =
            "6\n" +
            names +
            "1\n" +
            "erick\n" +
            "0";

        public static final String test4 =
            "6\n" +
            names +
            "3\n" +
            "1\n" +
            "burgess\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "erick\n" +
            "0";

        public static final String test5 =
            "6\n" +
            names +
            "2\n" +
            "1\n" +
            "@\n" +
            "1\n" +
            "this text never find some match\n" +
            "2\n" +
            "0";

        public static final String test6 =
            "6\n" +
            names +
            "0";

        public SimpleSearchEngineTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {

            List<TestCase<TestClue>> tests = new ArrayList<>();

            for (String input : new String[]{
                test1, test2, test3, test4, test5, test6}) {

                tests.add(new TestCase<TestClue>()
                    .setAttach(new TestClue(6, input))
                    .setInput(input));
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;
            String[] idealSearchResult;

            int referenceCount;

            //check count of iteration to fill search reference
            try {
                referenceCount = Integer.parseInt(inputLines[0]);
            } catch (NumberFormatException e) {
                return new CheckResult(false,
                    "The number of lines to search must be a number!");
            }

            if (referenceCount != clue.referencesCount) {
                return new CheckResult(false,
                    "Count of search source lines not match expected!");
            }

            reference = new String[referenceCount];

            for (int i = 0; i < referenceCount; i++) {
                reference[i] = inputLines[i + 1];
            }

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (ContainsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i));
                }
            }

            int currentInputLine = referenceCount + 1;
            int currentOutputLine = 0;

            int actionType = -1;

            int searchIteration = 1;
            int fullOutputIteration = 1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number" +
                            " or count of search source is wrong!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        String toSearch = inputLines[currentInputLine];

                        currentInputLine++;

                        idealSearchResult = Arrays.stream(reference)
                            .filter(line -> line.toLowerCase()
                            .contains(toSearch.toLowerCase().trim()))
                            .toArray(String[]::new);

                        String[] currentSearchResult = new String[idealSearchResult.length];
                        for (int i = 0; i < currentSearchResult.length; i++) {
                            try {
                                currentSearchResult[i] = cleanedOutput.get(currentOutputLine);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                            currentOutputLine++;
                        }

                        Arrays.sort(currentSearchResult);
                        Arrays.sort(idealSearchResult);

                        if (!Arrays.equals(currentSearchResult, idealSearchResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }

                        searchIteration++;
                        break;

                    case 2:
                        currentInputLine++;

                        String[] currentAll = new String[reference.length];
                        for (int i = 0; i < currentAll.length; i++) {
                            try {
                                currentAll[i] = cleanedOutput.get(currentOutputLine);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                            currentOutputLine++;
                        }

                        Arrays.sort(currentAll);
                        Arrays.sort(reference);

                        if (!Arrays.equals(currentAll, reference)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        fullOutputIteration++;
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        public static boolean ContainsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }

  learner_created: false
- name: src/search/Check.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/66/stages/356/implement
status: Failed
feedback:
  message: "Exception in test #5\n\nProbably you have nextInt() (or similar Scanner\
    \ method) followed by nextLine() - in this situation nextLine() often gives an\
    \ empty string and another one nextLine() call gives correct string.\n\njava.util.InputMismatchException\r\
    \n\tat java.base/java.util.Scanner.throwFor(Scanner.java:939)\r\n\tat java.base/java.util.Scanner.next(Scanner.java:1594)\r\
    \n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2258)\r\n\tat java.base/java.util.Scanner.nextInt(Scanner.java:2212)\r\
    \n\tat search.Main.main(Main.java:22)\n\nPlease find below the output of your\
    \ program during this failed test.\nNote that the &#39;&gt;&#39; character indicates\
    \ the beginning of the input line.\n\n---\n\nEnter the number of people:\n&gt;\
    \ 6\nEnter all people:\n&gt; Dwight Joseph djo@gmail.com\n&gt; Rene Webb webb@gmail.com\n\
    &gt; Katie Jacobs\n&gt; Erick Harrington harrington@gmail.com\n&gt; Myrtle Medina\n\
    &gt; Erick Burgess\n\n=== Menu ===\n1. Find a person\n2. Print all people\n0.\
    \ Exit\n&gt; 2\n=== List of people ===\nDwight Joseph djo@gmail.com\nRene Webb\
    \ webb@gmail.com\nKatie Jacobs\nErick Harrington harrington@gmail.com\nMyrtle\
    \ Medina\nErick Burgess\n\n=== Menu ===\n1. Find a person\n2. Print all people\n\
    0. Exit\n&gt; 1\nEnter a name or email to search all suitable people.\n&gt; @\n\
    Dwight Joseph djo@gmail.com\nRene Webb webb@gmail.com\nErick Harrington harrington@gmail.com\n\
    \n\n=== Menu ===\n1. Find a person\n2. Print all people\n0. Exit\n&gt; 1\nEnter\
    \ a name or email to search all suitable people.\n&gt; this text never find some\
    \ match\nNo matching people found.\n\n\n=== Menu ===\n1. Find a person\n2. Print\
    \ all people\n0. Exit"
  time: Sat, 12 Sep 2020 18:14:25 UTC
record: -1
